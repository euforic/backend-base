// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TodosServiceClient is the client API for TodosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodosServiceClient interface {
	CreateTodo(ctx context.Context, in *CreateTodoReq, opts ...grpc.CallOption) (*CreateTodoRes, error)
	GetTodo(ctx context.Context, in *GetTodoReq, opts ...grpc.CallOption) (*GetTodoRes, error)
	GetTodos(ctx context.Context, in *GetTodosReq, opts ...grpc.CallOption) (*GetTodosRes, error)
	UpdateTodo(ctx context.Context, in *UpdateTodoReq, opts ...grpc.CallOption) (*UpdateTodoRes, error)
	DeleteTodo(ctx context.Context, in *DeleteTodoReq, opts ...grpc.CallOption) (*DeleteTodoRes, error)
	ListTodos(ctx context.Context, in *ListTodosReq, opts ...grpc.CallOption) (*ListTodosRes, error)
}

type todosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodosServiceClient(cc grpc.ClientConnInterface) TodosServiceClient {
	return &todosServiceClient{cc}
}

func (c *todosServiceClient) CreateTodo(ctx context.Context, in *CreateTodoReq, opts ...grpc.CallOption) (*CreateTodoRes, error) {
	out := new(CreateTodoRes)
	err := c.cc.Invoke(ctx, "/proto.TodosService/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosServiceClient) GetTodo(ctx context.Context, in *GetTodoReq, opts ...grpc.CallOption) (*GetTodoRes, error) {
	out := new(GetTodoRes)
	err := c.cc.Invoke(ctx, "/proto.TodosService/GetTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosServiceClient) GetTodos(ctx context.Context, in *GetTodosReq, opts ...grpc.CallOption) (*GetTodosRes, error) {
	out := new(GetTodosRes)
	err := c.cc.Invoke(ctx, "/proto.TodosService/GetTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosServiceClient) UpdateTodo(ctx context.Context, in *UpdateTodoReq, opts ...grpc.CallOption) (*UpdateTodoRes, error) {
	out := new(UpdateTodoRes)
	err := c.cc.Invoke(ctx, "/proto.TodosService/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosServiceClient) DeleteTodo(ctx context.Context, in *DeleteTodoReq, opts ...grpc.CallOption) (*DeleteTodoRes, error) {
	out := new(DeleteTodoRes)
	err := c.cc.Invoke(ctx, "/proto.TodosService/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosServiceClient) ListTodos(ctx context.Context, in *ListTodosReq, opts ...grpc.CallOption) (*ListTodosRes, error) {
	out := new(ListTodosRes)
	err := c.cc.Invoke(ctx, "/proto.TodosService/ListTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodosServiceServer is the server API for TodosService service.
// All implementations should embed UnimplementedTodosServiceServer
// for forward compatibility
type TodosServiceServer interface {
	CreateTodo(context.Context, *CreateTodoReq) (*CreateTodoRes, error)
	GetTodo(context.Context, *GetTodoReq) (*GetTodoRes, error)
	GetTodos(context.Context, *GetTodosReq) (*GetTodosRes, error)
	UpdateTodo(context.Context, *UpdateTodoReq) (*UpdateTodoRes, error)
	DeleteTodo(context.Context, *DeleteTodoReq) (*DeleteTodoRes, error)
	ListTodos(context.Context, *ListTodosReq) (*ListTodosRes, error)
}

// UnimplementedTodosServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTodosServiceServer struct {
}

func (UnimplementedTodosServiceServer) CreateTodo(context.Context, *CreateTodoReq) (*CreateTodoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodosServiceServer) GetTodo(context.Context, *GetTodoReq) (*GetTodoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
}
func (UnimplementedTodosServiceServer) GetTodos(context.Context, *GetTodosReq) (*GetTodosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodos not implemented")
}
func (UnimplementedTodosServiceServer) UpdateTodo(context.Context, *UpdateTodoReq) (*UpdateTodoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (UnimplementedTodosServiceServer) DeleteTodo(context.Context, *DeleteTodoReq) (*DeleteTodoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedTodosServiceServer) ListTodos(context.Context, *ListTodosReq) (*ListTodosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodos not implemented")
}

// UnsafeTodosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodosServiceServer will
// result in compilation errors.
type UnsafeTodosServiceServer interface {
	mustEmbedUnimplementedTodosServiceServer()
}

func RegisterTodosServiceServer(s grpc.ServiceRegistrar, srv TodosServiceServer) {
	s.RegisterService(&_TodosService_serviceDesc, srv)
}

func _TodosService_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServiceServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodosService/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServiceServer).CreateTodo(ctx, req.(*CreateTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodosService_GetTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServiceServer).GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodosService/GetTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServiceServer).GetTodo(ctx, req.(*GetTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodosService_GetTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServiceServer).GetTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodosService/GetTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServiceServer).GetTodos(ctx, req.(*GetTodosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodosService_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServiceServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodosService/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServiceServer).UpdateTodo(ctx, req.(*UpdateTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodosService_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServiceServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodosService/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServiceServer).DeleteTodo(ctx, req.(*DeleteTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodosService_ListTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTodosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServiceServer).ListTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodosService/ListTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServiceServer).ListTodos(ctx, req.(*ListTodosReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TodosService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TodosService",
	HandlerType: (*TodosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _TodosService_CreateTodo_Handler,
		},
		{
			MethodName: "GetTodo",
			Handler:    _TodosService_GetTodo_Handler,
		},
		{
			MethodName: "GetTodos",
			Handler:    _TodosService_GetTodos_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _TodosService_UpdateTodo_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodosService_DeleteTodo_Handler,
		},
		{
			MethodName: "ListTodos",
			Handler:    _TodosService_ListTodos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}
